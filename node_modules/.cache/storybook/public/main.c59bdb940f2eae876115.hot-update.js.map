{"version":3,"file":"main.c59bdb940f2eae876115.hot-update.js","sources":["webpack:///./src/components/Button/index.tsx","webpack:///./stories/Button.stories.tsx"],"sourcesContent":["import React from 'react';\nimport classname from 'classnames';\n\nexport enum ButtonVariant {\n    default = 'default',\n    primary = 'primary',\n    secondary = 'secondary',\n    success = 'success',\n    info = 'info',\n    danger = 'danger',\n    warning = 'warning',\n}\n\nexport enum ButtonSize {\n    sm = 'sm',\n    md = 'md',\n    lg = 'lg',\n}\n\nexport interface IProps {\n    outlined?: Boolean;\n    onClick?: () => void;\n    disabled?: Boolean;\n    label: string,\n    variant: ButtonVariant\n    size: ButtonSize\n}\n\nexport const Button: React.FC<IProps> = ({ \n    label,\n    outlined = false,\n    size = ButtonSize.md,\n    variant = ButtonVariant.default,\n    ...props\n }) => {\n    return (\n        <button className={\n            classname({\n                'font-bold uppercase rounded shadow hover:shadow-lg mr-1 mb-1 ease-linear transition-all duration-150' :  true,\n                // Outline none\n                'bg-gray-600 text-white active:bg-gray-700 hover:bg-gray-700' : ButtonVariant.default == variant,\n                'bg-teal-300 text-white active:bg-teal-500 hover:bg-teal-500' : ButtonVariant.primary == variant,\n                'bg-orange-400 text-white active:bg-orange-600 hover:bg-orange-600' : ButtonVariant.secondary == variant,\n                'bg-teal-400 text-white active:bg-teal-500 hover:bg-teal-500' : ButtonVariant.success == variant,\n                'bg-cyan-300 text-white active:bg-cyan-500 hover:bg-cyan-500' : ButtonVariant.info == variant,\n                'bg-amber-400 text-white active:bg-amber-500 hover:bg-amber-500' : ButtonVariant.warning == variant,\n                'bg-red-400 text-white active:bg-red-500 hover:bg-red-500' : ButtonVariant.danger == variant,\n            \n                // Outline\n                'outline outline-2 bg-transparent' : outlined,\n                'text-gray-600 outline-gray-600  active:outline-gray-700 hover:text-white active:text-white hover:outline-gray-700' : ButtonVariant.default == variant && outlined,\n                'text-teal-300 outline-teal-300  active:outline-teal-500 hover:text-white active:text-white hover:outline-teal-500' : ButtonVariant.primary == variant && outlined,\n                'text-orange-400 outline-orange-400  active:outline-orange-600 hover:text-white active:text-white hover:outline-orange-600' : ButtonVariant.secondary == variant && outlined,\n                'text-teal-400 outline-teal-400  active:outline-teal-500 hover:text-white active:text-white hover:outline-teal-500' : ButtonVariant.success == variant && outlined,\n                'text-cyan-300 outline-cyan-300  active:outline-cyan-500 hover:text-white active:text-white hover:outline-cyan-500' : ButtonVariant.info == variant && outlined,\n                'text-amber-400 outline-amber-400  active:outline-amber-500 hover:text-white active:text-white hover:outline-amber-500' : ButtonVariant.warning == variant && outlined,\n                'text-red-400 outline-red-400  active:outline-red-500 hover:text-white active:text-white hover:outline-red-500' : ButtonVariant.danger == variant && outlined,\n\n                // Size\n                'text-xs px-4 py-2 ' : ButtonSize.sm == size,\n                'text-sm px-6 py-3 ' : ButtonSize.md == size,\n                'px-8 py-3 ' : ButtonSize.lg == size,\n\n            })\n        }>\n            <i className=\"fas fa-heart\"></i> {label}\n        </button>\n    )\n}","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {useState} from 'react';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\n\\nimport { Button } from '../src';\\nimport { ButtonSize, ButtonVariant } from '../src/components/Button';\\n\\nexport default {\\n  /* üëá The title prop is optional.\\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\\n  * to learn how to generate automatic titles\\n  */\\n  title: 'Button',\\n  component: Button,\\n\\n  args: {\\n    //üëá Now all Button stories will be primary.\\n    outlined: false,\\n  },\\n  argTypes: {\\n    variant: {\\n      options: [ButtonVariant.default,'primary', 'secondary', 'danger', 'warning', 'info', 'success'],\\n      control: { type: 'select' },\\n    },\\n    size: {\\n      options: [ ButtonSize.sm, ButtonSize.md, ButtonSize.lg],\\n      control: 'inline-radio' \\n    },\\n    outlined : { control : 'boolean'},\\n    disabled : { control : 'boolean'},\\n  }\\n} as ComponentMeta<typeof Button>;\\n\\n\\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\\n\\n//üëá Each story then reuses that template\\nexport const Default = Template.bind({});\\nDefault.args = { label: 'Button Default', variant: ButtonVariant.default };\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":48,\"line\":35},\"endLoc\":{\"col\":78,\"line\":35},\"startBody\":{\"col\":48,\"line\":35},\"endBody\":{\"col\":78,\"line\":35}}};\n    \nimport React, {useState} from 'react';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\n\nimport { Button } from '../src';\nimport { ButtonSize, ButtonVariant } from '../src/components/Button';\n\nexport default {\n  /* üëá The title prop is optional.\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n  * to learn how to generate automatic titles\n  */\n  title: 'Button',\n  component: Button,\n\n  args: {\n    //üëá Now all Button stories will be primary.\n    outlined: false,\n  },\n  argTypes: {\n    variant: {\n      options: [ButtonVariant.default,'primary', 'secondary', 'danger', 'warning', 'info', 'success'],\n      control: { type: 'select' },\n    },\n    size: {\n      options: [ ButtonSize.sm, ButtonSize.md, ButtonSize.lg],\n      control: 'inline-radio' \n    },\n    outlined : { control : 'boolean'},\n    disabled : { control : 'boolean'},\n  }\n} as ComponentMeta<typeof Button>;\n\n\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n\n//üëá Each story then reuses that template\nexport const Default = Template.bind({});\nDefault.args = { label: 'Button Default', variant: ButtonVariant.default };\n\n\nDefault.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Default.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAxBA;AADA;AA6BA;AAAA;AA7BA;AAgCA;AAxCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AAZA;AACA;AA2BA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}