{"version":3,"file":"main.40ad6d43af4a4c5c94f0.hot-update.js","sources":["webpack:///./stories/Button.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {useState} from 'react';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\n\\nimport { Button } from '../src';\\nimport { ButtonVariant } from '../src/components/Button';\\n\\nexport default {\\n  /* üëá The title prop is optional.\\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\\n  * to learn how to generate automatic titles\\n  */\\n  title: 'Button',\\n  component: Button,\\n\\n  args: {\\n    //üëá Now all Button stories will be primary.\\n    outlined: false,\\n  },\\n  argTypes: {\\n    variant: {\\n      options: ['default','primary', 'secondary', 'danger', 'warning', 'info', 'success'],\\n      control: { type: 'select' },\\n    },\\n    size: {\\n      options: ['sm','md', 'lg'],\\n      control: { type: 'select' },\\n    },\\n    outlined : { control : 'boolean'},\\n  }\\n} as ComponentMeta<typeof Button>;\\n\\n\\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\\n\\n//üëá Each story then reuses that template\\nexport const Default = Template.bind({});\\nDefault.args = { label: 'Button Default', variant: ButtonVariant.default };\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":48,\"line\":34},\"endLoc\":{\"col\":78,\"line\":34},\"startBody\":{\"col\":48,\"line\":34},\"endBody\":{\"col\":78,\"line\":34}}};\n    \nimport React, {useState} from 'react';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\n\nimport { Button } from '../src';\nimport { ButtonVariant } from '../src/components/Button';\n\nexport default {\n  /* üëá The title prop is optional.\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n  * to learn how to generate automatic titles\n  */\n  title: 'Button',\n  component: Button,\n\n  args: {\n    //üëá Now all Button stories will be primary.\n    outlined: false,\n  },\n  argTypes: {\n    variant: {\n      options: ['default','primary', 'secondary', 'danger', 'warning', 'info', 'success'],\n      control: { type: 'select' },\n    },\n    size: {\n      options: ['sm','md', 'lg'],\n      control: { type: 'select' },\n    },\n    outlined : { control : 'boolean'},\n  }\n} as ComponentMeta<typeof Button>;\n\n\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\nconst Template: ComponentStory<typeof Button> = (args) => <Button {...args} />;\n\n//üëá Each story then reuses that template\nexport const Default = Template.bind({});\nDefault.args = { label: 'Button Default', variant: ButtonVariant.default };\n\n\nDefault.parameters = { storySource: { source: \"(args) => <Button {...args} />\" }, ...Default.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AATA;AAZA;AACA;AA0BA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}