{"version":3,"file":"main.13d0c577ae8d983a5b3f.hot-update.js","sources":["webpack:///./src/components/Badge/index.tsx","webpack:///./src/index.tsx","webpack:///./src/types.tsx","webpack:///./stories/Badge.stories.tsx"],"sourcesContent":["import React from 'react';\nimport classname from 'classnames';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport ReactLoading from 'react-loading';\nimport { ColorVariant } from '../../types';\n\nexport interface IProps {\n    outlined?: boolean;\n    label: string,\n    variant?: ColorVariant,\n    rounded ?: boolean;\n}\n\nexport const Badge: React.FC<IProps> = ({ \n    label,\n    outlined = false,\n    variant = ColorVariant.default,\n    rounded = false,\n    ...props\n }) => {\n\n    return (\n        <span className={classname({\n            \"text-xs font-semibold inline-block py-1 px-2 rounded uppercase last:mr-0 mr-1\": true,\n            // Outline none\n            'bg-gray-200 text-gray-600 ' : ColorVariant.default == variant && !outlined,\n            'bg-teal-200 text-teal-600' : ColorVariant.primary == variant && !outlined,\n            'bg-orange-200 text-orange-600 ' : ColorVariant.secondary == variant && !outlined,\n            'bg-teal-200  text-teal-600' : ColorVariant.success == variant && !outlined,\n            'bg-cyan-200 text-cyan-600' : ColorVariant.info == variant && !outlined,\n            'bg-amber-200 text-amber-600' : ColorVariant.warning == variant && !outlined,\n            'bg-red-200 text-red-600 ' : ColorVariant.danger == variant && !outlined,\n            // Outline\n            'outline outline-1 bg-transparent' : outlined,\n            'bg-transparent text-gray-600 outline-gray-600' : ColorVariant.default == variant && outlined,\n            'bg-transparent text-teal-300 outline-teal-300' : ColorVariant.primary == variant && outlined,\n            'bg-transparent text-orange-400 outline-orange-400' : ColorVariant.secondary == variant && outlined,\n            'bg-transparent text-teal-400 outline-teal-400' : ColorVariant.success == variant && outlined,\n            'bg-transparent text-cyan-300 outline-cyan-300' : ColorVariant.info == variant && outlined,\n            'bg-transparent text-amber-400 outline-amber-400' : ColorVariant.warning == variant && outlined,\n            'bg-transparent text-red-400 outline-red-400' : ColorVariant.danger == variant && outlined,\n\n            'rounded-full' : rounded\n        })}>\n            {label}\n        </span>\n    )\n}","export { Button } from './components/Button';\nexport { Alert } from './components/Alert';\nexport { Badge } from './components/Badge';","\nexport enum ColorVariant {\n    default = 'default',\n    primary = 'primary',\n    secondary = 'secondary',\n    success = 'success',\n    info = 'info',\n    danger = 'danger',\n    warning = 'warning',\n}\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {useState} from 'react';\\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\\n\\nimport { Badge } from '../src';\\nimport { BadgeVariant } from '../src/components/Badge';\\n\\nexport default {\\n  /* üëá The title prop is optional.\\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\\n  * to learn how to generate automatic titles\\n  */\\n  title: 'Data Display/Badge',\\n  component: Badge,\\n\\n  args: {\\n    //üëá Now all Button stories will be primary.\\n    outlined: false,\\n    rounded: false,\\n  },\\n  argTypes: {\\n    variant: {\\n      options: [BadgeVariant.default,'primary', 'secondary', 'danger', 'warning', 'info', 'success'],\\n      control: { type: 'select' }\\n    },\\n    outlined : { control : 'boolean'},\\n    rounded : { control : 'boolean'},\\n  }\\n} as ComponentMeta<typeof Badge>;\\n\\n\\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\\nconst Template: ComponentStory<typeof Badge> = (args) => <Badge {...args} />;\\n\\n//üëá Each story then reuses that template\\nexport const Default = Template.bind({});\\nDefault.args = { label: 'Default',  variant: BadgeVariant.default };\\n\\nexport const Primary = Template.bind({});\\nPrimary.args = { label: 'Primary',  variant: BadgeVariant.primary };\\n\\nexport const Secondary = Template.bind({});\\nSecondary.args = { label: 'Secondary',  variant: BadgeVariant.secondary };\\n\\nexport const Success = Template.bind({});\\nSuccess.args = { label: 'Success',  variant: BadgeVariant.success };\\n\\nexport const Danger = Template.bind({});\\nDanger.args = { label: 'Danger',  variant: BadgeVariant.danger };\\n\\nexport const Warning = Template.bind({});\\nWarning.args = { label: 'Warning',  variant: BadgeVariant.warning };\\n\\nexport const Info = Template.bind({});\\nInfo.args = { label: 'Info',  variant: BadgeVariant.info };\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Default\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Primary\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Secondary\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Success\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Danger\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Warning\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}},\"Info\":{\"startLoc\":{\"col\":47,\"line\":32},\"endLoc\":{\"col\":76,\"line\":32},\"startBody\":{\"col\":47,\"line\":32},\"endBody\":{\"col\":76,\"line\":32}}};\n    \nimport React, {useState} from 'react';\nimport { ComponentMeta, ComponentStory } from '@storybook/react';\n\nimport { Badge } from '../src';\nimport { BadgeVariant } from '../src/components/Badge';\n\nexport default {\n  /* üëá The title prop is optional.\n  * See https://storybook.js.org/docs/react/configure/overview#configure-story-loading\n  * to learn how to generate automatic titles\n  */\n  title: 'Data Display/Badge',\n  component: Badge,\n\n  args: {\n    //üëá Now all Button stories will be primary.\n    outlined: false,\n    rounded: false,\n  },\n  argTypes: {\n    variant: {\n      options: [BadgeVariant.default,'primary', 'secondary', 'danger', 'warning', 'info', 'success'],\n      control: { type: 'select' }\n    },\n    outlined : { control : 'boolean'},\n    rounded : { control : 'boolean'},\n  }\n} as ComponentMeta<typeof Badge>;\n\n\n//üëá We create a ‚Äútemplate‚Äù of how args map to rendering\nconst Template: ComponentStory<typeof Badge> = (args) => <Badge {...args} />;\n\n//üëá Each story then reuses that template\nexport const Default = Template.bind({});;\nDefault.args = { label: 'Default',  variant: BadgeVariant.default };\n\nexport const Primary = Template.bind({});;\nPrimary.args = { label: 'Primary',  variant: BadgeVariant.primary };\n\nexport const Secondary = Template.bind({});;\nSecondary.args = { label: 'Secondary',  variant: BadgeVariant.secondary };\n\nexport const Success = Template.bind({});;\nSuccess.args = { label: 'Success',  variant: BadgeVariant.success };\n\nexport const Danger = Template.bind({});;\nDanger.args = { label: 'Danger',  variant: BadgeVariant.danger };\n\nexport const Warning = Template.bind({});;\nWarning.args = { label: 'Warning',  variant: BadgeVariant.warning };\n\nexport const Info = Template.bind({});\nInfo.args = { label: 'Info',  variant: BadgeVariant.info };\n\n\nDefault.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Default.parameters };\nPrimary.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Primary.parameters };\nSecondary.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Secondary.parameters };\nSuccess.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Success.parameters };\nDanger.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Danger.parameters };\nWarning.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Warning.parameters };\nInfo.parameters = { storySource: { source: \"(args) => <Badge {...args} />\" }, ...Info.parameters };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;AASA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AApBA;AAAA;AAAA;AAyBA;AAlCA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AANA;AAbA;AACA;AAwBA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}